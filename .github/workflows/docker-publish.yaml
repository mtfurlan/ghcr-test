name: Create and publish a Docker image

on:
  push:
    branches:
      - develop
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # log in to the Container registry registry using the account and password that will publish the packages
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step.
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{raw}} # docker tag with full git tag
            type=semver,pattern=v{{major}} # also do v2
            type=semver,pattern=v{{major}}.{{minor}} # also do v2.0
            type=raw,value=${{github.event.repository.default_branch}},enable={{is_default_branch}}

      # It uses the `context` parameter to define the build's context
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built
      # It increases supply chain security for people who consume the image.
      # it also pushes another image to the repo, so meh
      #- name: Generate artifact attestation
      #  uses: actions/attest-build-provenance@v1
      #  with:
      #    subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #    subject-digest: ${{ steps.push.outputs.digest }}
      #    push-to-registry: true
